@startuml

skinparam handwritten true

TipoUsuario "1" -- "*" Usuario

Usuario <|-- Administrador
Usuario <|-- Administrativo

Departamento "1" -- "*" Funcionario

TipoProcesso "1" -- "*" Processo
Usuario "1" -- "*" Processo


TipoMovimentacao "1" -- "*" Movimentacao
Processo "1" -- "*" Movimentacao
Usuario "1" -- "*" Movimentacao
Funcionario "0..1" -- "1" Usuario


class Departamento {
	- id: Integer
	- nome: String 
	- sigla: String
	- gerarId(): Integer
	+ {static} buscarPorNome(nome: String): Departamento
	+ {static} buscarPorSigla(sigla: String): Departamento
	+ {static} buscarPorId(id: Integer): Departamento
	+ getId(): Integer
	+ getNome(): String
	+ getSigla(): String
	+ setId(id: Integer)
	+ setNome(nome: String)
	+ setSigla(sigla: String)
	+ salvar()
	+ excluir()	
}

class Funcionario {
	- id: Integer 
	- nome: String
	- cpf: String
	- departamento: Departamento
	- gerarId(): Integer
	+ {static} buscarPorNome(nome: String): Funcionario
	+ {static} buscarPorCpf(cpf: String): Funcionario
	+ {static} buscarPorId(id: Integer): Funcionario
	+ {static} buscarPorDepartamento(departamento: Departamento): Collection<Funcionario>
	+ getId(): Integer
	+ getNome(): String
	+ getCpf(): String
	+ getDepartamento(): Departamento
	+ setId(id: Integer)
	+ setNome(nome: String)
	+ setCpf(cpf: String)
	+ setDepartamento(departamento: Departamento)
	+ salvar()
	+ excluir()
}


class TipoUsuario {
	- id: Integer 
	- nome: String
	- gerarId(): Integer
	+ {static} buscarPorNome(nome: String): TipoUsuario
	+ {static} buscarPorId(id: Integer): TipoUsuario
	+ getId(): Integer
	+ getNome(): String
	+ setId(id: Integer)
	+ setNome(nome: String)
	+ salvar()
	+ excluir()	
}

class Usuario {
	- id: Integer
	- cpf: String
	- nome: String
	- email: String
	- senha: String
	- tipoUsuario: TipoUsuario
	- funcionario: Funcionario
	- gerarId(): Integer
	+ {static} sortearUsuario(Collection<Usuario>): Usuario
	+ {static} buscarPorId(id: Integer): Usuario
	+ {static} buscarPorEmail(email: String): Usuario
	+ {static} buscarPorEmailESenha(email: String, senha: String): Usuario
	+ {static} buscarPorFuncionario(funcionario: Funcionario): Usuario
	+ {static} buscarPorTipoUsuario(tipoUsuario: TipoUsuario): Collection<Usuario>
	+ {static} buscarPorDepartamento(departamento: Departamento): Collection<Usuario>
	+ getId(): Integer
	+ getCpf(): String
	+ getNome(): String
	+ getEmail(): String
	+ getSenha(): String
	+ getTipoUsuario(): TipoUsuario
	+ getFuncionario(): Funcionario
	+ setId(id: Integer)
	+ setCpf(cpf: String): void
	+ setNome(nome: String): void
	+ setEmail(email: String): void
	+ setSenha(senha: String): void
	+ setTipoUsuario(tipoUsuario: TipoUsuario)
	+ setFuncionario(funcionario: Funcionario)
	+ salvar(): void
	+ excluir(): void
	
	+ cadastrarProcesso_UC()
	+ concluirProcesso_UC()
	+ movimentarProcesso_UC()
	+ visualizarProcesso_UC()
	+ login_UC()
	+ logout_UC()
}



class TipoProcesso {
	- id: Integer 
	- nome: String
	- gerarId(): Integer
	+ {static} buscarPorNome(nome: String): TipoProcesso
	+ {static} buscarPorId(id: Integer): TipoProcesso
	+ getId(): Integer
	+ getNome(): String
	+ setId(id: Integer)
	+ setNome(nome: String)
	+ salvar()
	+ excluir()	
}


class Processo {
	- id: Integer, 
	- numero: String, 
	- usuario: Usuario , 
	- assunto: String, 
	- tipoProcesso: TipoProcesso
	- gerarId(): Integer
	+ {static} buscarPorNumero(numero: String): Processo
	+ {static} buscarPorId(id: Integer): Processo
	+ {static} buscarPorusuario(usuario: Usuario): Collection<Processo>	
	+ getId(): Integer
	+ getNumero(): String
	+ getUsuario(): Usuario
	+ getAssunto(): String
	+ getTipoProcesso(): TipoProcesso
	+ setId(id: Integer)
	+ setNumero(numero: String) 
	+ setUsuario(usuario: Usuario)
	+ setAssunto(assunto: String)
	+ setTipoProcesso(tipoProcesso: TipoProcesso)
	+ salvar()
	+ excluir()
}


class TipoMovimentacao {
	- id: Integer 
	- nome: String
	- gerarId(): Integer
	+ {static} buscarPorNome(nome: String): TipoMovimentacao
	+ {static} buscarPorId(id: Integer): TipoMovimentacao
	+ getId(): Integer
	+ getNome(): String
	+ setId(id: Integer)
	+ setNome(nome: String)
	+ salvar()
	+ excluir()	
}


class Movimentacao {
	- id: Integer, 
	- observacao: String, 
	- tipoMovimentacao: TipoMovimentacao 
	- processo: Processo 
	- dataInicio: Date
	- horaInicio: Time
	- doUsuario: Usuario
	- dataFim: Date
	- horaFim: Time
	- paraUsuario: Usuario
	- gerarId(): Integer
	+ {static} buscarPorId(): Movimentacao
	+ {static} buscarPorProcesso(processo: Processo): Collection<Movimentacao>
	+ {static} buscarAbertas(usuario: Usuario): Collection<Movimentacao>
	+ {static} buscarAbertasPorProcesso(processo: Processo): Collection<Movimentacao>
	+ getId(): Integer
	+ getObservacao(): String
	+ getTipoMovimentacao(): TipoMovimentacao
	+ getProcesso(): Processo
	+ getDataInicio(): Date
	+ getHoraInicio(): Time
	+ getDoUsuario(): Usuario
	+ getDataFim(): Date
	+ getHoraFim(): Time
	+ getParaUsuario(): Usuario
	+ setId(id: Integer)
	+ setObservacao(observacao: String) 
	+ setTipoMovimentacao(tipoMovimentacao: TipoMovimentacao)
	+ setProcesso(processo: Processo)
	+ setDataInicio(dataInicio: Date)
	+ setHoraInicio(horaInicio: Time)
	+ setDoUsuario(doUsuario: Usuario)
	+ setDataFim(dataFim: Date)
	+ setHoraFim(horaFim: Time)
	+ setParaUsuario(paraUsuario: Usuario)	
	+ salvar()
	+ excluir()	
}


class Administrativo {
	+ cadastrarDepartamento_UC()
	+ cadastrarFuncionario_UC(): void
	+ cadastrarProcesso_UC(): void
	+ cadastrarTipoMovimentacao_UC()
	+ cadastrarTipoProcesso_UC()
	+ alterarDepartamento_UC()
	+ alterarFuncionario_UC(): void
	+ alterarProcesso_UC(): void
	+ alterarTipoMovimentacao_UC()
	+ alterarTipoProcesso_UC()
	+ excluirDepartamento_UC()
	+ excluirFuncionario_UC(): void
	+ excluirProcesso_UC(): void
	+ excluirTipoMovimentacao_UC()
	+ excluirTipoProcesso_UC()
}

class Administrador {
	+ cadastrarUsuario_UC()
	+ alterarUsuario_UC()
	+ excluirUsuario_UC()
	+ cadastrarTipoUsuario_UC()
	+ alterarTipoUsuario_UC()
	+ excluirTipoUsuario_UC()
}

@enduml
